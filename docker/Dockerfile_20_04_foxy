ARG BASEIMG=ubuntu:focal
FROM $BASEIMG

# Set default USER and GROUP names
ARG USER=developer
ARG GROUP=developer

# Set ROS distribution
ARG ROSDIST=foxy

# Host 18.04, 20.04
# ARG NVIDIADRIVER=libnvidia-gl-440
# Host 20.10
ARG NVIDIADRIVER=libnvidia-gl-470

#
# Setup environment for non-interactive installation
ENV DEBIAN_FRONTEND noninteractive

# Base system tools
RUN export DEBIAN_FRONTEND=noninteractive \
 && apt update \
 && apt install -y \
    bash-completion \
    build-essential \
    cppcheck \
    clang-format \
    curl \
    cmake \
    lsb-release \
    git \
    htop \
    locate \
    mc \
    pkg-config \
    python3-pip \
    tmux \
    sudo \
    wget \
 && apt clean

RUN export DEBIAN_FRONTEND=noninteractive \
 && apt update \
 && apt install -y \
    tzdata \
 && ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime \
 && dpkg-reconfigure --frontend noninteractive tzdata \
 && apt clean

# Missing nvidia libraries
RUN sudo apt update \
 && sudo apt install -y \
    $NVIDIADRIVER \
 && apt clean

# Base ROS2 base system
RUN apt update && sudo apt install -y curl gnupg2 lsb-release \
 && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg \
 && /bin/sh -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null' \
 && apt update \
 && apt install -y \
    python3-rosdep \
    ros-${ROSDIST}-desktop \
 && rosdep init \
 && apt clean

RUN apt update \
 && apt install -y \
   ros-${ROSDIST}-gazebo-ros \
 && apt clean

# #############################################################
#
# Project specific dependencies
#

#
# Crazyflie toolchain
# Based on https://www.bitcraze.io/documentation/repository/crazyflie-firmware/master/building-and-flashing/build/

RUN apt update \
 && apt install -y \
    gcc-arm-none-eabi \
 && apt clean

# RUN pip3 install --upgrade pip # Recommended by cfclient installation, but causes a failure in the build

RUN pip3 install cfclient

#
# GAP8
# Based on https://github.com/GreenWaves-Technologies/gap_sdk

# requirements
RUN apt update \
 && apt-get install -y \
    autoconf \
    automake \
    bison \
    build-essential \
    cmake \
    curl \
    doxygen \
    flex \
    git \
    gtkwave \
    libftdi-dev \
    libftdi1 \
    libjpeg-dev \
    libsdl2-dev \
    libsdl2-ttf-dev \
    libsndfile1-dev \
    graphicsmagick-libmagick-dev-compat \
    libtool \
    libusb-1.0-0-dev \
    pkg-config \
    python3-pip \
    rsync \
    scons \
    texinfo \
    wget \
 && apt clean

# python is python3
RUN apt update \
 && apt install -y \
    python-is-python3 \
 && apt clean

# OpenOCD for GAP8
RUN cd \
 && git clone https://github.com/GreenWaves-Technologies/gap8_openocd.git \
 && cd gap8_openocd \
 && ./bootstrap \
 && ./configure --program-prefix=gap8- --prefix=/usr --datarootdir=/usr/share/gap8-openocd \
 && make -j \
 && sudo make -j install \
 && cd .. \
 && rm -rf gap8_openocd

# GAP8 Toolchain
RUN cd \
 && git clone https://github.com/GreenWaves-Technologies/gap_riscv_toolchain_ubuntu_18.git \
 && cd gap_riscv_toolchain_ubuntu_18 \
 && ./install.sh /usr/lib/gap_riscv_toolchain && echo "Arg is default value, but needed to avoid interactivity" \
 && cd .. \
 && rm -rf gap_riscv_toolchain_ubuntu_18

# GAP SDK
RUN mkdir -p /home/$USER/
COPY files/DOTtiler_url /tmp/DOTtiler_url
RUN /bin/bash -c 'cd /home/$USER \
 && git clone https://github.com/GreenWaves-Technologies/gap_sdk.git \
 && cd gap_sdk \
 && cp /tmp/DOTtiler_url ./.tiler_url \
 && pip3 install -r requirements.txt \
 && pip3 install -r doc/requirements.txt \
 && . configs/ai_deck.sh \
 && export TILER_LICENSE_AGREED="yes" \
 && export PROCS=" -j 10 " \
 && make minimal $PROCS \
 && make gvsoc $PROCS \
 && make autotiler $PROCS \
 && make openocd.all $PROCS \
 && cd .. \
 && chmod -R a+r gap_sdk'

# Webots v2022a IMAVs Crazyflie dependencies, needed
# to run the steps in https://github.com/tudelft/crazyflie-simulation
RUN cd \
 && apt update \
 && apt install -y ffmpeg libfox-1.6-dev libssh-dev virtualenv swig \
 && wget -q https://github.com/cyberbotics/webots/releases/download/R2022a/webots_2022a_amd64.deb \
 && dpkg -i webots_2022a_amd64.deb \
 && rm webots_2022a_amd64.deb \
 && apt clean

# #############################################################

# Add a user with the same user_id as the user outside the container
# Requires a docker build argument `user_id`.
RUN curl -SsL https://github.com/boxboat/fixuid/releases/download/v0.4/fixuid-0.4-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf - && \
    chown root:root /usr/local/bin/fixuid && \
    chmod 4755 /usr/local/bin/fixuid && \
    mkdir -p /etc/fixuid && \
    printf "user: $USER\ngroup: $GROUP\n" > /etc/fixuid/config.yml

RUN addgroup --gid 1000 $USER && \
    adduser --uid 1000 --ingroup $USER --home /home/$USER --shell /bin/sh --disabled-password --gecos "" $USER

RUN adduser $USER sudo \
 && echo "$USER ALL=NOPASSWD: ALL" >> /etc/sudoers.d/$USER

RUN mkdir -p /home/$USER/project/workspace \
 && chown -R $USER: home/$USER

# # Add extra ROS packages here
# RUN apt update \
#  && apt install -y \
#    ros-${ROSDIST}-joy \
#  && apt clean

# Install extra tools tools

# RUN apt update \
#  && apt install -y \
#     ... \
#  && apt clean

# RUN pip3 install --upgrade pip # Recommended by cfclient installation, but causes a failure in the build

RUN pip3 install cfclient

# Commands below run as the developer user.
USER $USER:$GROUP

RUN rosdep update

# When running a container start in the developer's home folder.
WORKDIR /home/$USER

# Source all the needed environment files.
RUN /bin/sh -c 'echo ". /opt/ros/${ROSDIST}/setup.bash" >> ~/.bashrc' \
 && /bin/sh -c 'echo ". /usr/share/gazebo/setup.sh" >> ~/.bashrc' \
 && /bin/sh -c 'echo "set-option -g default-shell /bin/bash" >> ~/.tmux.conf'

#
# Ccache

# install ccache
RUN sudo apt update && sudo apt install -y ccache && sudo apt clean
# install ccache in the path
RUN /bin/sh -c 'echo "export PATH=/usr/lib/ccache:\$PATH" >> ~/.bashrc'
# sen envvars so that catkin_make finds ccache instead of using absolute paths
ENV CC=gcc
ENV GXX=g++
# Create .ccache cache dir to mount a volume there
RUN mkdir -p /home/$USER/.ccache

# Setup aliases
COPY files/DOTaliases .aliases
RUN /bin/sh -c 'echo ". ~/.aliases" >> ~/.bashrc'

WORKDIR /home/$USER/project/workspace

ENTRYPOINT ["fixuid"]

CMD ["/bin/bash"]
